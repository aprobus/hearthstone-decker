<div class="row text-center">
  <h2>Arena Runs By Hero</h2>
  <div id="numDecksChart"></div>
</div>

<div class="row text-center">
  <h2>Average Arena Wins</h2>
  <div id="avgWinsChart"></div>
</div>

<script type="text/javascript">
(function() {
  
  var avg_win_data = [];
  <% @avg_wins.by_hero.each do |stat| %>
  avg_win_data.push({
    hero_name: '<%= stat[:hero].display_name %>',
    value: <%= stat[:value] %>  
  });
  <% end %>
  avg_win_data.push({
    hero_name: 'Overall',
    value: <%= @avg_wins.total %>  
  });

  var margin = {top: 20, right: 20, bottom: 30, left: 40};
  var width = $("#avgWinsChart").width() - margin.left - margin.right;
  var height = 500 - margin.top - margin.bottom;

  var svg = d3.select("#avgWinsChart")
    .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
    .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var xValues = avg_win_data.map(function(d) { return d.hero_name; });
  var maxY = d3.max(avg_win_data, function(d) { return d.value; });

  var x = d3.scale.ordinal().rangeRoundBands([0, width], .1).domain(xValues);
  var y = d3.scale.linear().range([height, 0]).domain([0, maxY]);

  var xAxis = d3.svg.axis().scale(x).orient("bottom");
  var yAxis = d3.svg.axis().scale(y).orient("left");

  svg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);

  svg.append("g")
    .attr("class", "y axis")
    .call(yAxis)
    .append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Avg Wins");


  svg.selectAll(".bar")
    .data(avg_win_data)
    .enter()
    .append("rect")
    .attr("class", "bar")
    .attr("x", function(d) { return x(d.hero_name); })
    .attr("width", x.rangeBand())
    .attr("y", function(d) { return y(d.value); })
    .attr("height", function(d) { return height - y(d.value); });
    
  svg.selectAll(".valueLabel")
    .data(avg_win_data)
    .enter()
    .append("text")
    .attr('text-anchor', 'middle')
    .attr('class', 'valueLabel')
    .attr("x", function(d, i) { return x(x.domain()[i]) + x.rangeBand() / 2; })
    .attr("y", function(d) { return y(d.value) - 2; })
    .text(formatValueText);

  function formatValueText(d) {
    if (d.value > 0) {
      return d.value.toFixed(1); 
    } else {
      return '';  
    }
  }
})();

(function() {
  var data = [];
  <% @num_decks.by_hero.each do |stat| %>
    data.push({
      hero_name: '<%= stat[:hero].display_name %>',
      value: <%= stat[:value] %>  
    });
  <% end %>

  var width = $("#numDecksChart").width();
  var height = 500;
  var radius = Math.min(width, height) / 2;
  
  var color = d3.scale.ordinal()
      .range(["#D23F3F", "#354F8D", "#D2D23F", "#D28E3F", "#56358F", "#81BF3A", "#D2B23F", "#972D83", "#2A8B6E"]);  

  var arc = d3.svg.arc()
      .outerRadius(radius - 10)
      .innerRadius(0);

  var pie = d3.layout.pie()
      .sort(null)
      .value(function(d) { return d.value; });

  var svg = d3.select("#numDecksChart")
      .append("svg")
      .attr("width", width)
      .attr("height", height)
      .append("g");

  var g = svg.selectAll(".arc")
      .data(pie(data))
      .enter().append("g")
      .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")")
      .attr("class", "arc");

  g.append("path")
      .attr("d", arc)
      .style("fill", function(d) { return color(d.data.hero_name); });

  g.append("text")
      .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")"; })
      .attr("dy", ".35em")
      .style("text-anchor", "middle")
      .text(function(d) { return formatChartText(d.data); });

  var legend = svg.selectAll(".legend")
      .data(color.domain().slice().reverse())
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  var legendX = width / 2 + radius;
  var blockSize = 18;
  legend.append("rect")
      .attr("x", legendX)
      .attr("width", blockSize)
      .attr("height", blockSize)
      .style("fill", color);

  legend.append("text")
      .attr("x", legendX + blockSize + 2)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "start")
      .text(formatLegendText);

  function formatLegendText(heroName) {
    var numRuns = data.filter(function(dataItem) { return dataItem.hero_name === heroName; })[0].value;
    return heroName + ': ' + numRuns;  
  }

  function formatChartText(data) {
    if(data.value > 0) {
      return data.hero_name;
    } else {
      return '';  
    }
  }
})();

</script>

